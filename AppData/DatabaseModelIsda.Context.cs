//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderingSystem.AppData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Isda_Ordering_SystemEntities : DbContext
    {
        public Isda_Ordering_SystemEntities()
            : base("name=Isda_Ordering_SystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<UserAccount> UserAccount { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<CartDetail> CartDetail { get; set; }
        public virtual DbSet<vw_userList> vw_userList { get; set; }
        public virtual DbSet<vw_productList> vw_productList { get; set; }
        public virtual DbSet<vw_addressList> vw_addressList { get; set; }
    
        public virtual int DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIdParameter);
        }
    
        public virtual int NewUserAcc(string firstName, string lastName, string username, string password, Nullable<int> roleId, string contactInfo)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var contactInfoParameter = contactInfo != null ?
                new ObjectParameter("ContactInfo", contactInfo) :
                new ObjectParameter("ContactInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewUserAcc", firstNameParameter, lastNameParameter, usernameParameter, passwordParameter, roleIdParameter, contactInfoParameter);
        }
    
        public virtual ObjectResult<Register_Result> Register()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Register_Result>("Register");
        }
    
        public virtual int sp_UpdateUser(Nullable<int> uID, string uFN, string uLN, string uN, string uP, Nullable<int> rId, string uC)
        {
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("uID", uID) :
                new ObjectParameter("uID", typeof(int));
    
            var uFNParameter = uFN != null ?
                new ObjectParameter("uFN", uFN) :
                new ObjectParameter("uFN", typeof(string));
    
            var uLNParameter = uLN != null ?
                new ObjectParameter("uLN", uLN) :
                new ObjectParameter("uLN", typeof(string));
    
            var uNParameter = uN != null ?
                new ObjectParameter("uN", uN) :
                new ObjectParameter("uN", typeof(string));
    
            var uPParameter = uP != null ?
                new ObjectParameter("uP", uP) :
                new ObjectParameter("uP", typeof(string));
    
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var uCParameter = uC != null ?
                new ObjectParameter("uC", uC) :
                new ObjectParameter("uC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUser", uIDParameter, uFNParameter, uLNParameter, uNParameter, uPParameter, rIdParameter, uCParameter);
        }
    
        public virtual ObjectResult<Users_Result> Users()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_Result>("Users");
        }
    
        public virtual int sp_UpdateUser1(Nullable<int> uID, string uFN, string uLN, string uN, string uP, Nullable<int> rId, string uC)
        {
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("uID", uID) :
                new ObjectParameter("uID", typeof(int));
    
            var uFNParameter = uFN != null ?
                new ObjectParameter("uFN", uFN) :
                new ObjectParameter("uFN", typeof(string));
    
            var uLNParameter = uLN != null ?
                new ObjectParameter("uLN", uLN) :
                new ObjectParameter("uLN", typeof(string));
    
            var uNParameter = uN != null ?
                new ObjectParameter("uN", uN) :
                new ObjectParameter("uN", typeof(string));
    
            var uPParameter = uP != null ?
                new ObjectParameter("uP", uP) :
                new ObjectParameter("uP", typeof(string));
    
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var uCParameter = uC != null ?
                new ObjectParameter("uC", uC) :
                new ObjectParameter("uC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUser1", uIDParameter, uFNParameter, uLNParameter, uNParameter, uPParameter, rIdParameter, uCParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
